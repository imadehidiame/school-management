// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int? 
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

//Faculties -> Department -> Level -> ?:Arm 
//School[early,pre-school] -> Sections || Classes -> Aram

//To be used as base title for creating  school,section,class,arm
model BaseSchoolCategory {
  id             String    @id @default(cuid())
  school_naming  String
  section_naming String    
  class_naming   String
  arm_naming     String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@map("base_school_categories")
}

model School {
  id               String    @id  @default(uuid())
  school_name      String
  size             Int?
  school_sections  SchoolSections[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@map("schools")
}

model SchoolSections {
  id              String            @id  @default(uuid())
  section_name    String
  school_id       String
  school          School            @relation(fields: [school_id], references: [id], onDelete: Cascade)
  //section_arms    SectionArms[] 
  school_classes  SchoolClasses[]
  //student         Student[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("school_sections")
}

model SchoolClasses {
  id              String          @id    @default(uuid())
  class_name      String     
  section_id      String
  school_section  SchoolSections  @relation(fields: [section_id], references: [id], onDelete: Cascade)
  class_arms      ClassArms[]
  students        Student[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("school_classes")
}

model ClassArms {
  id                  String           @id @default(uuid())
  arm_name            String
  name_alias          String?
  school_class_id     String
  school_class        SchoolClasses    @relation(fields: [school_class_id],references: [id], onDelete: Cascade )
  student             Student[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@map("class_arms")
}

model SchoolSessions {
  id                  String           @id @default(cuid())
  session             String
  is_selected         Int              @default(0)
  admission           Admission[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@map("school_sessions")
}





model Parent {
  id              String       @id @default(uuid())
  firstName       String
  lastName        String
  email           String       @unique
  city            String?
  state           String?
  occupation      String?
  phoneNumber     String?
  address         String?
  office_address  String?
  photo           String?
  facebook        String?
  twitter         String?
  linkedin        String?
  children        Student[]
  //profile         ParentProfile?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

/*model ParentProfile {
  id        Int    @id @default(autoincrement())
  parentId  Int    @unique
  parent    Parent @relation(fields: [parentId], references: [id])
  bio       String?
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}*/

model Vehicle {
  id             String       @id @default(uuid())
  name           String       
  plate_no       String
  photo          String
  transport      Transport[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Transport {
  id            String        @id @default(uuid())
  route         String
  vehicle       Vehicle[]       
  student       Student[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Hostel {
  id            String        @id @default(uuid())
  hostel        String
  gender        String
  room          Room[]
  student       Student[]
}

model Room {
  id            String        @id @default(uuid())
  room          String
  capacity      Int           @default(1)
  hostel_id     String
  hostel        Hostel        @relation(fields: [hostel_id], references: [id])
  student       Student[]
}

model Student {
  id                    String            @id @default(uuid())
  student_id            String
  firstName             String
  lastName              String
  gender                String
  blood_group           String
  genotype              String
  religion              String?
  phone                 String?
  email                 String
  city                  String
  state                 String
  address               String
  photo                 String
  dateOfBirth           String
  previous_school       Json
  //photo                 String
  parentId              String
  parent                Parent         @relation(fields: [parentId], references: [id])
  class_id              String
  class                 SchoolClasses  @relation(fields: [class_id], references: [id])
  arm_id                String
  arm                   ClassArms      @relation(fields: [arm_id], references: [id])
  trans_id              String?
  transport             Transport?     @relation(fields: [trans_id], references: [id])
  room_id               String?
  room                  Room?          @relation(fields: [room_id], references: [id])
  hostel_id             String?          
  hostel                Hostel?        @relation(fields: [hostel_id], references: [id])
  //section_id  String
  //section     SchoolSections @relation(fields: [section_id], references: [id])
  //classId     Int
  //class       Class          @relation(fields: [classId], references: [id])
  //armId       Int
  //arm         Arm            @relation(fields: [armId], references: [id])
  //profile               StudentProfile?
  admission             Admission?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
}

/*model StudentProfile {
  id        Int     @id @default(autoincrement())
  studentId Int     @unique
  student   Student @relation(fields: [studentId], references: [id])
  bio       String?
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}*/

/*model Class {
  id        Int       @id @default(autoincrement())
  name      String    @unique // e.g., "Grade 1", "Year 7"
  //students  Student[]
  arms      Arm[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Arm {
  id        Int       @id @default(autoincrement())
  name      String    // e.g., "A", "B", "Red", "Blue"
  classId   Int
  class     Class     @relation(fields: [classId], references: [id])
  //students  Student[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, classId]) // Ensures unique arm names within a class
}*/

/*model SessionYear {
  id        Int       @id @default(autoincrement())
  name      String    @unique // e.g., "2023-2024"
  startDate DateTime
  endDate   DateTime
  admissions Admission[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}*/

model Admission {
  id              Int       @id @default(autoincrement())
  student_id      String    @unique
  student         Student   @relation(fields: [student_id], references: [id])
  //applicationDate String?    
  admission_date  String?
  //status          String    // e.g., "Pending", "Accepted", "Rejected"
  //notes           String?
  session_id      String
  sessionYear     SchoolSessions @relation(fields:[session_id], references:[id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}